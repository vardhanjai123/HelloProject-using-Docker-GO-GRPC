// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service3.proto

package gofiles2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	S                    string   `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9ff9fa3c26efb7, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

type Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9ff9fa3c26efb7, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Request)(nil), "gofiles2.Request")
	proto.RegisterType((*Response)(nil), "gofiles2.Response")
}

func init() { proto.RegisterFile("service3.proto", fileDescriptor_cd9ff9fa3c26efb7) }

var fileDescriptor_cd9ff9fa3c26efb7 = []byte{
	// 124 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x35, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0xcf, 0x4f, 0xcb,
	0xcc, 0x49, 0x2d, 0x36, 0x52, 0x12, 0xe7, 0x62, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11,
	0xe2, 0xe1, 0x62, 0x2c, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0x2c, 0x56, 0xe2, 0xe2,
	0xe2, 0x08, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x35, 0xb2, 0xe3, 0xe2, 0x09, 0x2e, 0xc8,
	0xc9, 0x2c, 0x09, 0x86, 0x98, 0x22, 0xa4, 0xc7, 0xc5, 0x0a, 0xe6, 0x0b, 0x09, 0xea, 0xc1, 0x0c,
	0xd2, 0x83, 0x9a, 0x22, 0x25, 0x84, 0x2c, 0x04, 0xd1, 0x9f, 0xc4, 0x06, 0xb6, 0xd5, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x6d, 0x6f, 0xbe, 0xfc, 0x87, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SplitServiceClient is the client API for SplitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SplitServiceClient interface {
	Split(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type splitServiceClient struct {
	cc *grpc.ClientConn
}

func NewSplitServiceClient(cc *grpc.ClientConn) SplitServiceClient {
	return &splitServiceClient{cc}
}

func (c *splitServiceClient) Split(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gofiles2.SplitService/Split", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SplitServiceServer is the server API for SplitService service.
type SplitServiceServer interface {
	Split(context.Context, *Request) (*Response, error)
}

// UnimplementedSplitServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSplitServiceServer struct {
}

func (*UnimplementedSplitServiceServer) Split(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Split not implemented")
}

func RegisterSplitServiceServer(s *grpc.Server, srv SplitServiceServer) {
	s.RegisterService(&_SplitService_serviceDesc, srv)
}

func _SplitService_Split_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SplitServiceServer).Split(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gofiles2.SplitService/Split",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SplitServiceServer).Split(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _SplitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gofiles2.SplitService",
	HandlerType: (*SplitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Split",
			Handler:    _SplitService_Split_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service3.proto",
}
